<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Tech Blog最佳实践概览]]></title>
    <url>%2F2018%2F03%2F30%2Ftech-blog%2F</url>
    <content type="text"><![CDATA[本文主要说明构建个人博客需要的所有工具和条件，以及每一个组件在构建blog的说明和作用，并不是完整的操作手册。在搭建博客前通过阅读本文，完整的明白各个组件承担的响应的角色，当遇到问题时可以清楚地确定问题可能发生的原因。推荐完整看完本文后再进入各个组件深入学习。本文阅读时间1小时。 ToolsGit + Github Pages + Node.js + Hexo + NexT Theme knowledge Base Git – 熟悉Git的工作原理和怎样使用Git。 推荐时间：2天 Github – 练习注册一个 账号github , 创建并练习使用repository，搭建Github pages。推荐时间： 1天 Hexo – 安装Hexo, 设置基本的Hexo配置练习。推荐时间： 1天 NexT Theme –从Hexo 默认Theme切换到NexT后，练习自定义主题主要的元素。推荐时间： 0.5天 Markdown – 学会使用Markdown的语法编辑文档，通过Markdown编辑器练习使用各种标签。推荐时间：0.5天 GitGit是目前世界上最先进的分布式版本控制系统（没有之一）。那什么是版本控制系统？ 在编辑文档时，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？ 这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪，这个软件就是Git。 还不明白，可以进入廖雪峰老师的文档继续深入学习：Git introduction Git下载地址：Git Download Node.jsNode.js并不需要我们了解怎样使用它。我们只需要知道下面的Hexo能够正常工作需要依赖Node.js。所以只需要知道如何安装： 下载并安装nvm.（什么是nvm？不需要知道，只需要知道他可以方便安装node.js） Download nvm $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh install nvm $ cd .nvm/ $ ./install.sh set bash profile $ export NVM_DIR=&quot;$HOME/.nvm&quot; $ [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; install Node.js $ nvm install stable GitHub PageGithub做为Git的云端版本库，可以放任何人随时随地边编辑和发布文档，而且完全开源免费。Github Page作为Github的一个功能，只需要将站点文件上传到Github上，你可以拥有自己的免费Blog平台，不需要托管主机，不需要域名。 account: yourusername通过ssh方式连接Github： git@github.com:_yourusername_/ 通过http方式连接Github： https://github.com/_yourusername_/ $ git config --global user.name &quot;Your Name&quot; $ git config --global user.email &quot;email@example.com&quot; HexoHexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。什么意思呢？ 我们知道静网页文件都是.html文件，需要很多标签对格式进行控制。如果我们有Hexo后，我们可以将可读性很高的文本档使用Markdown的语法通过Hexo转换成.html文件，并且生成完整的完整框架。我们只需要编辑文本文件，通hexo生成网站的框架和内容，并且部署生成自己的网站。 Install hexo $npm install hexo-cli -g set up hexo $hexo init blog $cd blog $npm install $hexo server NexT如果说Hexo为一个人的躯体，那么NexT就是这个躯体的衣服，让Hexo变得更美，这就是NexT。 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 安装 NexTHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 下载主题 $ cd your-hexo-site $ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题 #编辑系统配置文件_config.yml,找到Theme设置并将值改成next theme: next 验证主题 $hexo s --debug INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. MarkdownMarkdown 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式.Markdown ENDING http://zhaoweihao.me/2017/04/29/Hexo-Github-pages-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ https://www.cnblogs.com/fengxiongZz/p/7707219.html]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>git</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown Quick Guide]]></title>
    <url>%2F2018%2F03%2F29%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[本文主要介绍Markdown的基本使用方法，基本不用了解HTML的语法。按照本文的说明编辑文本后，只要通过Markdown编辑器，就能生成一个html文件。本文阅读时间大约1-2个小时。 概览宗旨Markdown 的目标是实现「易读易写」。 兼容 HTMLMarkdown 语法的目标是：成为一种适用于网络的书写语言。 特殊字符自动转换在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。 区块元素段落和换行在插入处先按入两个以上的空格然后回车 标题在行首插入 1 到 6 个 #，对应到标题 1 到 6 阶，例如： # 这是 H1 ## 这是 H2 ###### 这是 H6 区块引用blockquotes用 &gt; 的引用方式，例如： This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. 区块引用可以嵌套，例如： This is nested blockquote. Back to the first level 列表序列表使用星号、加号或是减号作为列表标记： * Red * Green * Blue 有序列表则使用数字接着一个英文句点： 1. Bird 2. McHale 3. Parish 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符： 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符： 在行首出现数字-句点-空白: 1986. What a great season. 代码区块要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： 这是一个普通段落： 这是一个代码区块。 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线 * * * *** ***** - - - --------------------------------------- 区段元素链接行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可: This is [an example](http://example.com/ &quot;Title&quot;) inline link. [This link](http://example.net/) has no title attribute. See my [About](/about/) page for details. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： This is [an example][id] reference-style link. 链接内容定义的形式为： * 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 * 接着一个冒号 * 接着一个以上的空格或制表符 * 接着链接的网址 * 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着 下面是一个参考式链接的范例： I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 强调Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong>，例如： *single asterisks* single asterisks _single underscores_ single underscores **double asterisks** double asterisks __double underscores__ double underscores 代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如： Use the `printf()` function. 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： 图片Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 参考式的图片语法则长得像这样： ![Alt text][id] [id]: url/to/image &quot;Optional title attribute&quot; 其它反斜杠利用反斜杠来插入一些在语法中有其它意义的符号Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 自动链接只要是用方括号包起来， Markdown 就会自动把它转成链接，一般网址的链接文字就和链接地址一样，例如： &lt;http://example.com/&gt; Markdown 免费编辑器Windows 平台 MarkdownPad MarkPad Linux 平台 ReText Mac 平台 Mou 在线编辑器 Markable.in Dillinger.io 浏览器插件 MaDe (Chrome) 高级应用(Sublime Text 2 + MarkdownEditing 教程) Sublime Text 2 MarkdownEditing 教程 感谢感谢: http://daringfireball.net/projects/markdown/ 原文：http://www.markdown.cn/#overview]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>HTML</tag>
        <tag>Content</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[post picture]]></title>
    <url>%2F2018%2F03%2F27%2Fpost-picture%2F</url>
    <content type="text"><![CDATA[Totoro content]]></content>
      <categories>
        <category>Film</category>
      </categories>
      <tags>
        <tag>Film</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[boyhood]]></title>
    <url>%2F2018%2F03%2F15%2Fboyhood%2F</url>
    <content type="text"><![CDATA[教程史上最浅显易懂的Git教程！ LiaoxuefengGit教程Codeuseradd.sh12345#!/bin/bashfor (i=0,i++,i&lt;a) do i=i++; echo $i; done Link互联网工程任务组（IETF）已正式批准TLS 1.3作为传输层安全（TLS）协议的下一个主要版本，IETF组织是专门批准互联网标准和协议的组织。]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Other</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《朝花夕拾》]]></title>
    <url>%2F2018%2F03%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[我常想在纷扰中寻出一点闲静来，然而委实不容易。目前是这么离奇，心里是这么芜杂。一个人做到只剩了回忆的时候，生涯大概总要算是无聊了罢，但有时竟会连回忆也没有。 前天，已将《野草》编定了；这回便轮到陆续载在《莽原》上的《旧事重提》，我还替他改了一个名称：《朝花夕拾》。带露折花，色香自然要好得多，但是我不能够。便是现在心目中的离奇和芜杂，我也还不能使他即刻幻化，转成离奇和芜杂的文章。或者，他日仰看流云时，会在我的眼前一闪烁罢。 我有一时，曾经屡次忆起儿时在故乡所吃的蔬果：菱角、罗汉豆、茭白、香瓜。凡这些，都是极其鲜美可口的；都曾是使我思乡的蛊惑。后来，我在久别之后尝到了，也不过如此；惟独在记忆上，还有旧来的意味留存。他们也许要哄骗我一生，使我时时反顾。 ——《朝花夕拾》小引正如鲁迅先生给文集取名《朝花夕拾》一样，当我第一次感觉到每天忙于各种凌杂的琐碎，无暇去思考和记录做过的一些工作，而当再次拿起这些工作时，记忆是那么的空白，没有一点线索可以现成的找寻。想想在这些年的工作中，有做过不少研究和探索，零散的记录在不同的地方，或是在纸质的笔记本上，在不同的文件夹中，在在线软件文档中，有些干脆没有记录，只是在大脑中保存一点记忆。取名《朝花夕拾》这个寓意很好，这些年来工作中，重新整理那些有意义的资料文档，即可归纳总结多年来工作的成绩，也保存有价值的历史资料或记忆。 回忆，我发现，可能是不可靠的东西，尝尝被你回忆时的环境所大大的扭曲。 ——《远山淡影》石黑一雄 当石黑一雄获得诺贝尔文学奖时，当我我看《远山淡影》这本书时，没忍住买了一本但是没怎么看懂。后来一次去一家书店阅读时，看到上面这段书评，心中瞬间被这就句话触动了。回想阅读这本书时的情节突然就想通了。 记忆，可不就是这样吗？曾经很熟悉的知识内容，在时间的冲淡下，常常只有一个模糊印象，更糟糕的是将几个不相关的片段串在一起。对于技术这个来说，太要糟糕了，当再去想用过的东西还需要不停的调试和排错，这对效率来说是巨大的损失，对精力是巨大的折磨。我们太需要这种实实在在东西将我们印象的东西记录下来。 Without you,who would I admire all the beautiful things with.“没有你 良辰美景可与何人说。” ——《天使爱美丽》台词 最后，我要说的是，对于关于Share这件事，我想这也是Github的核心精神，将自己的贡献上传到公共的平台上，不仅是一个免费展示自己的平台，而且让那些需要的人可以浏览和下载。在Share中获得快乐，同时又可以帮助他人，这或许也是一种自我实现。 这大概就是我记录博客的初衷吧。]]></content>
  </entry>
</search>
